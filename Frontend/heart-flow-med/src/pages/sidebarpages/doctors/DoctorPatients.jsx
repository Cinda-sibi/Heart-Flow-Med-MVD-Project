import React, { useState, useEffect } from 'react';
import { FileText, Download, Eye, Calendar } from 'lucide-react';
import { fetchPatientsByLoginDoctor, fetchPatientById, fetchPatientTestResults } from '../../../apis/DoctorDashboardApis';
import jsPDF from "jspdf";
import "jspdf-autotable";

const MedicalRecords = () => {
  const [records, setRecords] = useState([]);
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState(null);
  const [selectedPatient, setSelectedPatient] = useState(null);
  const [testResults, setTestResults] = useState([]);
  const [testResultsLoading, setTestResultsLoading] = useState(false);
  const [patientDetailsLoading, setPatientDetailsLoading] = useState(false);
  const [searchQuery, setSearchQuery] = useState('');

  useEffect(() => {
    const fetchPatients = async () => {
      try {
        const data = await fetchPatientsByLoginDoctor();
        setRecords(data.data);
      } catch (err) {
        setError('Failed to fetch patients');
      } finally {
        setLoading(false);
      }
    };
    fetchPatients();
  }, []);

  const openPatientModal = async (patient) => {
    setPatientDetailsLoading(true);
    setTestResultsLoading(true);
    try {
      const data = await fetchPatientById(patient.id);
      setSelectedPatient(data.data || data);
      // Fetch test results for the patient
      const resultsData = await fetchPatientTestResults(patient.id);
      setTestResults(resultsData.data || resultsData);
    } catch (err) {
      setSelectedPatient(null);
      setTestResults([]);
      alert('Failed to fetch patient details or test results');
    } finally {
      setPatientDetailsLoading(false);
      setTestResultsLoading(false);
    }
  };

  const closeModal = () => {
    setSelectedPatient(null);
  };

  const handleDownloadPatientPDF = (patient, reports) => {
    const doc = new jsPDF();

    // Modern header
    doc.setFillColor(37, 99, 235); // Tailwind blue-600
    doc.rect(0, 0, 210, 30, "F");
    doc.setTextColor(255, 255, 255);
    doc.setFontSize(22);
    doc.text("Patient Details", 14, 20);

    // Patient Info Section
    doc.setFontSize(12);
    doc.setTextColor(37, 99, 235);
    doc.text("Personal Information", 14, 40);
    doc.setTextColor(33, 37, 41);

    const info = [
      ["Name", patient.name],
      ["Email", patient.email],
      ["Phone", patient.phone],
      ["Gender", patient.gender],
      ["DOB", patient.dob],
      ["Address", patient.address],
      ["Insurance", patient.insurance],
      ["Insurance ID", patient.insuranceId],
      ["Medical Ref No", patient.medicalRefNo],
      ["Unique ID", patient.uniqueId],
    ];

    doc.autoTable({
      startY: 45,
      theme: "striped",
      headStyles: { fillColor: [219, 234, 254], textColor: [37, 99, 235], fontStyle: "bold" },
      bodyStyles: { textColor: [33, 37, 41] },
      columnStyles: { 0: { cellWidth: 50, fontStyle: "bold" }, 1: { cellWidth: 120 } },
      body: info,
      styles: { fontSize: 11, cellPadding: 3 },
      margin: { left: 14, right: 14 },
    });

    // Reports Section
    let y = doc.lastAutoTable.finalY + 10;
    doc.setTextColor(16, 185, 129); // Tailwind green-500
    doc.setFontSize(14);
    doc.text("Test Results & Reports", 14, y);

    if (reports && reports.length > 0) {
      const reportRows = reports.map(r => [
        r.title,
        r.date,
        r.status,
        r.notes,
        r.summary,
      ]);
      doc.autoTable({
        startY: y + 5,
        head: [["Title", "Date", "Status", "Notes", "Summary"]],
        body: reportRows,
        theme: "grid",
        headStyles: { fillColor: [16, 185, 129], textColor: 255 },
        bodyStyles: { textColor: [33, 37, 41] },
        styles: { fontSize: 10, cellPadding: 2 },
        margin: { left: 14, right: 14 },
      });
    } else {
      doc.setFontSize(11);
      doc.setTextColor(100, 116, 139);
      doc.text("No reports available.", 14, y + 10);
    }

    // Footer
    doc.setFontSize(10);
    doc.setTextColor(148, 163, 184);
    doc.text("Generated by Hearth Flow Med", 14, 290);

    doc.save(`${patient.name.replace(/\s+/g, "_")}_details.pdf`);
  };

  return (
    <div className="container mx-auto px-4 py-8">
      <div className="flex justify-between items-center mb-6">
        <h1 className="text-2xl font-bold">Patients And Medical Records</h1>
        <div className="flex space-x-4">
          <input
            type="text"
            placeholder="Search records..."
            className="px-4 py-2 border rounded-lg focus:outline-none focus:ring-2 focus:ring-blue-500"
            value={searchQuery}
            onChange={e => setSearchQuery(e.target.value)}
          />
          {/* <button className="bg-blue-600 text-white px-4 py-2 rounded-lg hover:bg-blue-700">
            New Record
          </button> */}
        </div>
      </div>

      <div className="bg-white rounded-lg shadow overflow-hidden">
        <div className="overflow-x-auto">
          {loading ? (
            <div className="p-4">Loading...</div>
          ) : error ? (
            <div className="p-4 text-red-500">{error}</div>
          ) : (
            <table className="min-w-full divide-y divide-gray-200">
              <thead className="bg-gray-50">
                <tr>
                  <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                    Patient Name
                  </th>
                  <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                    Actions
                  </th>
                </tr>
              </thead>
              <tbody className="bg-white divide-y divide-gray-200">
                {records && records.length > 0 ? (
                  records
                    .filter(record => {
                      const name = record.user
                        ? `${record.user.first_name} ${record.user.last_name}`.toLowerCase()
                        : '';
                      return name.includes(searchQuery.toLowerCase());
                    })
                    .map((record) => (
                    <tr key={record.id}>
                      <td className="px-6 py-4 whitespace-nowrap">
                        <div className="text-sm font-medium text-gray-900">
                          {record.user ? `${record.user.first_name} ${record.user.last_name}` : '-'}
                        </div>
                      </td>
                      <td className="px-6 py-4 whitespace-nowrap text-sm font-medium">
                        <button
                          className="text-blue-600 hover:text-blue-900 mr-3"
                          onClick={() => openPatientModal(record)}
                        >
                          <Eye className="h-5 w-5" />
                        </button>
                        <button className="text-green-600 hover:text-green-900">
                          <Download className="h-5 w-5" />
                        </button>
                      </td>
                    </tr>
                  ))
                ) : (
                  <tr>
                    <td colSpan="2" className="px-6 py-4 text-center text-gray-500">
                      No records found.
                    </td>
                  </tr>
                )}
              </tbody>
            </table>
          )}
        </div>
      </div>

      {selectedPatient && (
        <div className="fixed inset-0 z-50 flex items-center justify-center bg-black bg-opacity-40 transition-opacity">
          <div className="relative bg-white rounded-2xl shadow-2xl max-w-4xl w-full mx-4 flex flex-col md:flex-row animate-fadeInScale">
            {/* Close Button */}
            <button
              className="absolute top-4 right-4 text-gray-400 hover:text-gray-700 transition"
              onClick={closeModal}
              aria-label="Close"
            >
              <svg className="h-6 w-6" fill="none" stroke="currentColor" strokeWidth={2} viewBox="0 0 24 24">
                <path strokeLinecap="round" strokeLinejoin="round" d="M6 18L18 6M6 6l12 12" />
              </svg>
            </button>
            {/* Left: Patient Details */}
            <div className="md:w-1/2 bg-blue-50 rounded-l-2xl p-8 flex flex-col justify-between">
              <div>
                <div className="flex items-center gap-2 mb-6">
                  <svg className="h-8 w-8 text-blue-600" fill="none" stroke="currentColor" strokeWidth={2} viewBox="0 0 24 24">
                    <path strokeLinecap="round" strokeLinejoin="round" d="M5.121 17.804A13.937 13.937 0 0112 15c2.5 0 4.847.655 6.879 1.804M15 11a3 3 0 11-6 0 3 3 0 016 0z" />
                  </svg>
                  <h2 className="text-2xl font-bold text-blue-800">Patient Details</h2>
                </div>
                <div className="space-y-2 text-gray-800">
                  <div><span className="font-semibold">Name:</span> {selectedPatient.user ? `${selectedPatient.user.first_name} ${selectedPatient.user.last_name}` : '-'}</div>
                  <div><span className="font-semibold">Email:</span> {selectedPatient.user ? selectedPatient.user.email : '-'}</div>
                  <div><span className="font-semibold">Phone:</span> {selectedPatient.user ? selectedPatient.user.phone : '-'}</div>
                  <div><span className="font-semibold">Gender:</span> {selectedPatient.gender}</div>
                  <div><span className="font-semibold">DOB:</span> {selectedPatient.date_of_birth}</div>
                  <div><span className="font-semibold">Address:</span> {selectedPatient.address}</div>
                  <div><span className="font-semibold">Insurance:</span> {selectedPatient.insurance_provider}</div>
                  <div><span className="font-semibold">Insurance ID:</span> {selectedPatient.insurance_id}</div>
                  <div><span className="font-semibold">Medical Ref No:</span> {selectedPatient.medical_reference_no || '-'}</div>
                  <div><span className="font-semibold">Unique ID:</span> {selectedPatient.unique_id}</div>
                </div>
              </div>
              <button
                className="mt-8 w-full py-3 rounded-lg bg-blue-600 text-white font-semibold text-lg hover:bg-blue-700 transition shadow"
                onClick={() => handleDownloadPatientPDF(selectedPatient, testResults)}
              >
                Download Full Details
              </button>
            </div>
            {/* Right: Test Results & Reports */}
            <div className="md:w-1/2 p-8 flex flex-col">
              <h3 className="text-xl font-bold text-gray-900 mb-4 flex items-center gap-2">
                <svg className="h-6 w-6 text-green-600" fill="none" stroke="currentColor" strokeWidth={2} viewBox="0 0 24 24">
                  <path strokeLinecap="round" strokeLinejoin="round" d="M9 17v-2a4 4 0 014-4h3m4 0a9 9 0 11-18 0 9 9 0 0118 0z" />
                </svg>
                Test Results & Reports
              </h3>
              <div className="space-y-4">
                {testResultsLoading ? (
                  <div className="text-gray-400 italic">Loading test results...</div>
                ) : testResults.length === 0 ? (
                  <div className="text-gray-400 italic">No test results found.</div>
                ) : (
                  testResults.map((result, idx) => (
                    <div key={result.id} className="bg-gray-50 rounded-lg p-4 shadow-sm border border-gray-100">
                      <div className="flex items-center justify-between mb-1">
                        <span className="font-semibold text-gray-900">{result.test_name}</span>
                        <span className="px-2 py-0.5 rounded-full text-xs font-medium bg-blue-100 text-blue-700">{result.status}</span>
                      </div>
                      <div className="text-xs text-gray-500 mb-1">{result.date} {result.time}</div>
                      <div className="text-sm"><span className="font-semibold">Notes:</span> {result.notes || '-'}</div>
                      <div className="text-sm"><span className="font-semibold">Summary:</span> {result.result_summary || '-'}</div>
                      <div className="mt-2 flex gap-4">
                        {result.attached_report_url ? (
                          <>
                            <a
                              href={result.attached_report_url}
                              className="text-blue-600 hover:underline font-medium text-sm"
                              target="_blank"
                              rel="noopener noreferrer"
                            >
                              View Report
                            </a>
                            <a
                              href={result.attached_report_url}
                              download
                              className="text-green-600 hover:underline font-medium text-sm"
                            >
                              Download
                            </a>
                          </>
                        ) : (
                          <span className="text-xs text-gray-400 italic">No report attached</span>
                        )}
                      </div>
                    </div>
                  ))
                )}
              </div>
            </div>
            {/* Animation keyframes */}
            <style>
              {`
                @keyframes fadeInScale {
                  0% { opacity: 0; transform: scale(0.95);}
                  100% { opacity: 1; transform: scale(1);}
                }
                .animate-fadeInScale {
                  animation: fadeInScale 0.25s cubic-bezier(0.4,0,0.2,1);
                }
              `}
            </style>
          </div>
        </div>
      )}
    </div>
  );
};

export default MedicalRecords; 